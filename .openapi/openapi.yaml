openapi: 3.0.3
info:
  title: GoApp API
  version: 1.0.0
  description: ''
tags:
  - name: Health
    description: ヘルスチェック関連のエンドポイント
    x-displayName: Health
  - name: Users
    description: Operations related to user management
    x-displayName: Users
paths:
  /health/readiness:
    get:
      tags:
        - Health
      summary: Readiness チェック
      description: システムがリクエストを受け付ける準備ができているかを確認します
      responses:
        '200':
          description: システムが利用可能
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: システムが利用不可
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
  /health/liveness:
    get:
      tags:
        - Health
      summary: Liveness チェック
      description: システムが正常に動作しているかを確認します
      responses:
        '200':
          description: システムが稼働中
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: システムが停止またはハングアップ中
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
  /users:
    get:
      tags:
        - Users
      summary: List all users
      description: Retrieves a list of users.
      operationId: list_users
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
              example:
                users:
                  - id: 123e4567-e89b-7acd-afe1-0123456789ab
                    name: John Doe
                    email: john.doe@example.com
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: https://example.com/problems/internal
                title: Internal server error
                status: 500
                detail: Unexpected error occurred while processing the request.
                error_code: INTERNAL_ERROR
                trace_id: 123e4567-e89b-12d3-a456-426614174000
    post:
      tags:
        - Users
      summary: Create a new user
      description: Creates a new user.
      operationId: create_user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPrototype'
            example:
              name: Jane Smith
              email: jane.smith@example.com
      responses:
        '201':
          description: Created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              example:
                user:
                  id: 123e4567-e89b-7acd-afe1-abcdefabcdef
                  name: Jane Smith
                  email: jane.smith@example.com
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: https://example.com/problems/invalid-request
                title: Your request parameters didn't validate.
                status: 400
                detail: Validation failed.
                error_code: INVALID_PARAMETERS
                invalid_params:
                  - name: email
                    reason: must be a valid email address
                  - name: name
                    reason: must not be empty
                trace_id: 123e4567-e89b-12d3-a456-426614174000
        '413':
          description: Content too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: https://example.com/problems/request-too-large
                title: Your request body is too large.
                status: 413
                detail: Content Too Large
                error_code: CONTENT_TOO_LARGE
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: https://example.com/problems/internal
                title: Internal server error
                status: 500
                detail: Unexpected error occurred while processing the request.
                error_code: INTERNAL_ERROR
                trace_id: 123e4567-e89b-12d3-a456-426614174000
  /users/{user_id}:
    parameters:
      - name: user_id
        in: path
        description: User ID (UUIDv7)
        required: true
        schema:
          type: string
          minLength: 36
          maxLength: 36
    get:
      tags:
        - Users
      summary: Get a user by ID
      description: Retrieves a user by its ID.
      operationId: get_user_by_id
      responses:
        '200':
          description: A single user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              example:
                user:
                  id: 123e4567-e89b-7acd-afe1-0123456789ab
                  name: John Doe
                  email: john.doe@example.com
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: https://example.com/problems/user-not-found
                title: User not found
                status: 404
                detail: No user with the given ID was found.
                error_code: USER_NOT_FOUND
                trace_id: 123e4567-e89b-12d3-a456-426614174000
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: https://example.com/problems/internal
                title: Internal server error
                status: 500
                detail: Unexpected error occurred while processing the request.
                error_code: INTERNAL_ERROR
                trace_id: 123e4567-e89b-12d3-a456-426614174000
    patch:
      tags:
        - Users
      summary: Update a user by ID
      description: Updates an existing user by its ID.
      operationId: update_user_by_id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPrototypeOptional'
            example:
              name: Johnathan Doe
              email: johnathan.doe@example.com
      responses:
        '200':
          description: Updated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              example:
                user:
                  id: 123e4567-e89b-7acd-afe1-0123456789ab
                  name: Johnathan Doe
                  email: johnathan.doe@example.com
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: https://example.com/problems/invalid-request
                title: Your request parameters didn't validate.
                status: 400
                detail: Validation failed.
                error_code: INVALID_PARAMETERS
                invalid_params:
                  - name: email
                    reason: must be a valid email address
                  - name: name
                    reason: must not be empty
                trace_id: 123e4567-e89b-12d3-a456-426614174000
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: https://example.com/problems/user-not-found
                title: User not found
                status: 404
                detail: No user with the given ID was found.
                error_code: USER_NOT_FOUND
                trace_id: 123e4567-e89b-12d3-a456-426614174000
        '413':
          description: Content too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: https://example.com/problems/request-too-large
                title: Your request body is too large.
                status: 413
                detail: Content Too Large
                error_code: CONTENT_TOO_LARGE
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: https://example.com/problems/internal
                title: Internal server error
                status: 500
                detail: Unexpected error occurred while processing the request.
                error_code: INTERNAL_ERROR
                trace_id: 123e4567-e89b-12d3-a456-426614174000
    delete:
      tags:
        - Users
      summary: Delete a user by ID
      description: Deletes a user by its ID.
      operationId: delete_user_by_id
      responses:
        '204':
          description: User deleted (no content)
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: https://example.com/problems/user-not-found
                title: User not found
                status: 404
                detail: No user with the given ID was found.
                error_code: USER_NOT_FOUND
                trace_id: 123e4567-e89b-12d3-a456-426614174000
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
              example:
                type: https://example.com/problems/internal
                title: Internal server error
                status: 500
                detail: Unexpected error occurred while processing the request.
                error_code: INTERNAL_ERROR
                trace_id: 123e4567-e89b-12d3-a456-426614174000
components:
  schemas:
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          description: システムの状態
          enum:
            - available
            - unavailable
      required:
        - status
      example:
        status: available
    InvalidParam:
      type: object
      description: A single invalid parameter and its validation reason.
      properties:
        name:
          type: string
          description: The name of the invalid field (in JSON).
          example: email
        reason:
          type: string
          description: The reason why the field is invalid.
          example: must be a valid email address
      required:
        - name
        - reason
    ProblemDetailsBase:
      type: object
      description: Standard RFC7807 Problem Details base object
      properties:
        type:
          type: string
          format: uri-reference
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
        instance:
          type: string
          format: uri-reference
      additionalProperties: true
    ProblemDetails:
      allOf:
        - $ref: '#/components/schemas/ProblemDetailsBase'
        - type: object
          properties:
            error_code:
              type: string
              example: INVALID_PARAMETERS
            invalid_params:
              type: array
              items:
                $ref: '#/components/schemas/InvalidParam'
            trace_id:
              type: string
              example: 123e4567-e89b-12d3-a456-426614174000
    User:
      type: object
      description: Representation of a user
      properties:
        id:
          type: string
          description: Unique identifier for the user (UUIDv7)
          minLength: 36
          maxLength: 36
          x-go-type: uuid.UUID
          x-go-type-import:
            name: uuid
            path: github.com/google/uuid
        name:
          type: string
          description: Full name of the user
          minLength: 1
          maxLength: 100
        email:
          type: string
          description: Email address of the user
          minLength: 5
          maxLength: 254
      required:
        - id
        - name
        - email
    UserPrototype:
      type: object
      description: Prototype schema for user create
      properties:
        name:
          type: string
          description: Full name of the user
          minLength: 1
          maxLength: 100
          x-oapi-codegen-extra-tags:
            binding: required
        email:
          type: string
          description: Email address of the user
          minLength: 5
          maxLength: 254
          x-oapi-codegen-extra-tags:
            binding: required,email
      required:
        - name
        - email
    UserPrototypeOptional:
      type: object
      description: Prototype schema for user update
      properties:
        name:
          type: string
          description: Full name of the user
          minLength: 1
          maxLength: 100
          x-oapi-codegen-extra-tags:
            binding: required
        email:
          type: string
          description: Email address of the user
          minLength: 5
          maxLength: 254
          x-oapi-codegen-extra-tags:
            binding: required,email
    UsersListResponse:
      type: object
      description: Users list response
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          minItems: 0
          maxItems: 100
      required:
        - users
    UserResponse:
      type: object
      description: Single user response
      properties:
        user:
          $ref: '#/components/schemas/User'
      required:
        - user
x-tagGroups:
  - name: Health Check API
    tags:
      - Health
  - name: User API
    tags:
      - Users
