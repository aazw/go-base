name: goapp # docker networkの名前を固定するために、compose project nameを指定する
services:
  # ##################################################################
  # Main App
  # ##################################################################

  goapp:
    build:
      context: .
    ports:
      - '8080:8080'
    command:
      - goapp
      - --config
      - /goapp/config/config.yaml
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/config/goapp:/goapp/config

  # https://hub.docker.com/_/postgres
  # https://github.com/postgres/postgres
  postgres:
    image: postgres:17
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: hogehoge
      POSTGRES_DB: test_db
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # https://hub.docker.com/r/sosedoff/pgweb
  # https://github.com/sosedoff/pgweb
  pgweb:
    image: sosedoff/pgweb:0.16.2
    restart: always
    ports:
      - 8081:8081
    environment:
      DATABASE_URL: 'postgresql://postgres:hogehoge@postgres:5432/test_db?sslmode=disable'
    depends_on:
      postgres:
        condition: service_healthy

  # https://hub.docker.com/r/migrate/migrate
  # https://github.com/golang-migrate/migrate
  goapp-migrate-up:
    image: migrate/migrate:v4.18.3
    restart: no
    command:
      - -database
      - 'postgresql://postgres:hogehoge@postgres:5432/test_db?sslmode=disable'
      - -path
      - /goapp/db/migrations
      - up
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/db/migrations:/goapp/db/migrations
    profiles:
      - run-only
    depends_on:
      postgres:
        condition: service_healthy

  # https://hub.docker.com/r/migrate/migrate
  # https://github.com/golang-migrate/migrate
  goapp-migrate-down:
    image: migrate/migrate:v4.18.3
    restart: no
    command:
      - -database
      - 'postgresql://postgres:hogehoge@postgres:5432/test_db?sslmode=disable'
      - -path
      - /goapp/db/migrations
      - down
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/db/migrations:/goapp/db/migrations
    profiles:
      - run-only
    depends_on:
      postgres:
        condition: service_healthy

  # https://github.com/valkey-io/valkey
  # https://hub.docker.com/r/valkey/valkey
  valkey:
    image: valkey/valkey:8.1.1
    restart: always
    ports:
      - 6379:6379

  # https://hub.docker.com/r/redis/redisinsight
  # https://github.com/RedisInsight/RedisInsight
  redisinsight:
    image: redis/redisinsight:2.68
    restart: always
    ports:
      - 5540:5540
    environment:
      RI_APP_HOST: 0.0.0.0
      RI_REDIS_HOST: valkey
      RI_REDIS_PORT: '6379'

  # ##################################################################
  # Dashboard
  # ##################################################################

  # https://hub.docker.com/r/grafana/grafana
  # https://github.com/grafana/grafana
  grafana:
    image: grafana/grafana:12.0.1
    restart: always
    ports:
      - '3000:3000'
    environment:
      # 匿名アクセスを有効化
      GF_AUTH_ANONYMOUS_ENABLED: true
      # 匿名ユーザーが所属する組織名（デフォルトは "Main Org."）
      GF_AUTH_ANONYMOUS_ORG_NAME: 'Main Org.'
      # 匿名ユーザーに付与するロール（Admin, Editor, Viewer のいずれか）
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      # ログインフォームを非表示にする
      GF_AUTH_DISABLE_LOGIN_FORM: true
      # Basic 認証を無効化
      GF_AUTH_BASIC_ENABLED: false
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/config/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ${LOCAL_WORKSPACE_FOLDER:-.}/config/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards

  # ##################################################################
  # Metrics
  # ##################################################################

  # https://hub.docker.com/r/grafana/mimir
  # https://github.com/grafana/mimir
  mimir:
    image: grafana/mimir:2.16.0
    restart: always
    ports:
      - '9009:9009'
    command:
      - -target=all
      - -server.http-listen-address=0.0.0.0
      - -server.grpc-listen-address=0.0.0.0
      - --config.file=/etc/mimir/mimir.yaml
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/config/mimir/mimir.yaml:/etc/mimir/mimir.yaml

  # https://hub.docker.com/r/prom/prometheus
  # https://github.com/prometheus/prometheus
  prometheus:
    image: prom/prometheus:v3.4.0
    restart: always
    ports:
      - '9090:9090'
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/config/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    extra_hosts:
      - host.docker.internal:host-gateway
    profiles:
      - disabled

  # https://hub.docker.com/r/grafana/alloy
  # https://github.com/grafana/alloy
  alloy:
    image: grafana/alloy:v1.8.3
    restart: always
    ports:
      - '12345:12345'
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/config/alloy:/etc/alloy
    extra_hosts:
      - host.docker.internal:host-gateway

  # ##################################################################
  # Tracing
  # ##################################################################

  # https://hub.docker.com/r/grafana/tempo
  # https://github.com/grafana/tempo
  tempo:
    image: grafana/tempo:2.7.2
    restart: always
    ports:
      - '3200:3200' # tempo http
      - '4317:4317' # otlp grpc
      - '4318:4318' # otlp http
      - '9095:9095' # tempo grpc
    command:
      - -config.file=/etc/tempo/tempo.yaml
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/config/tempo:/etc/tempo

  # ##################################################################
  # Profiling
  # ##################################################################

  # https://hub.docker.com/r/grafana/pyroscope
  # https://github.com/grafana/pyroscope
  pyroscope:
    image: grafana/pyroscope:1.13.4
    restart: always
    ports:
      - '4040:4040'

  # ##################################################################
  # Logs
  # ##################################################################

  # https://hub.docker.com/r/grafana/loki
  # https://github.com/grafana/loki
  loki:
    image: grafana/loki:3.5.1
    restart: always
    ports:
      - '3100:3100'
      - '9096:9096'
    command:
      - -config.file=/etc/loki/loki-local-config.yaml
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/config/loki:/etc/loki

  # https://hub.docker.com/r/grafana/promtail
  # https://github.com/grafana/loki
  promtail:
    image: grafana/promtail:3.5.1
    restart: always
    ports:
      - '9080:9080'
    command:
      - -config.file=/etc/loki/promtail-docker-config.yaml
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/config/loki:/etc/loki
      - /var/log:/var/log
      - /var/run/docker.sock:/var/run/docker.sock:ro

  # ##################################################################
  # Logs, Traces, Profiles, Metrics
  # ##################################################################

  # https://hub.docker.com/r/otel/opentelemetry-collector-contrib
  # https://github.com/open-telemetry/opentelemetry-collector
  # https://opentelemetry.io/docs/collector/installation/
  # https://opentelemetry.io/docs/languages/go/getting-started/
  # https://opentelemetry.io/docs/languages/go/instrumentation/
  opentelemetry-collector:
    image: otel/opentelemetry-collector-contrib:0.126.0
    restart: always
    ports:
      - '51888:1888' # pprof extension
      - '58888:8888' # Prometheus metrics exposed by the Collector
      - '58889:8889' # Prometheus exporter metrics
      - '53133:13133' # health_check extension
      - '54317:4317' # OTLP gRPC receiver
      - '54318:4318' # OTLP http receiver
      - '55679:55679' # zpages extension
    command:
      - --config=/etc/otelcol-contrib/config/config.yaml
      - '--feature-gates=+service.profilesSupport'
    environment:
      - OTELCOL_FEATURE_GATES=+service.profilesSupport
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/config/opentelemetry-collector:/etc/otelcol-contrib/config

  # ##################################################################
  # OpenAPI
  # ##################################################################

  # https://hub.docker.com/r/redocly/cli
  # https://github.com/Redocly/redocly-cli
  redocly-preview:
    image: redocly/cli:1.34.3
    restart: always
    ports:
      - '18080:8080'
    command:
      - preview-docs
      - /openapi/openapi.yaml
      - --host
      - 0.0.0.0
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/.openapi:/openapi

  # ##################################################################
  # Load Testing
  # ##################################################################

  # https://hub.docker.com/r/grafana/k6
  # https://github.com/grafana/k6
  k6:
    image: grafana/k6:1.0.0
    restart: no
    working_dir: /k6
    command:
      - run
      - /k6/script.js
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/config/k6:/k6:ro
    profiles:
      - run-only
