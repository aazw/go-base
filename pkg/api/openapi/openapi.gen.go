// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	uuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Defines values for HealthStatusStatus.
const (
	Available   HealthStatusStatus = "available"
	Unavailable HealthStatusStatus = "unavailable"
)

// HealthStatus defines model for HealthStatus.
type HealthStatus struct {
	// Status システムの状態
	Status HealthStatusStatus `json:"status"`
}

// HealthStatusStatus システムの状態
type HealthStatusStatus string

// InvalidParam A single invalid parameter and its validation reason.
type InvalidParam struct {
	// Name The name of the invalid field (in JSON).
	Name string `json:"name"`

	// Reason The reason why the field is invalid.
	Reason string `json:"reason"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	Detail               *string                `json:"detail,omitempty"`
	ErrorCode            *string                `json:"error_code,omitempty"`
	Instance             *string                `json:"instance,omitempty"`
	InvalidParams        *[]InvalidParam        `json:"invalid_params,omitempty"`
	Status               *int32                 `json:"status,omitempty"`
	Title                *string                `json:"title,omitempty"`
	TraceId              *string                `json:"trace_id,omitempty"`
	Type                 *string                `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProblemDetailsBase Standard RFC7807 Problem Details base object
type ProblemDetailsBase struct {
	Detail               *string                `json:"detail,omitempty"`
	Instance             *string                `json:"instance,omitempty"`
	Status               *int32                 `json:"status,omitempty"`
	Title                *string                `json:"title,omitempty"`
	Type                 *string                `json:"type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// User Representation of a user
type User struct {
	// Email Email address of the user
	Email string `binding:"required,email,min=5,max=254" json:"email"`

	// Id Unique identifier for the user (UUIDv7)
	Id uuid.UUID `binding:"required,uuid" json:"id"`

	// Name Full name of the user
	Name string `binding:"required,min=1,max=100" json:"name"`
}

// UserPrototype Prototype schema for user create or update
type UserPrototype struct {
	// Email Email address of the user
	Email string `binding:"required,email,min=5,max=254" json:"email"`

	// Name Full name of the user
	Name string `binding:"required,min=1,max=100" json:"name"`
}

// UserResponse Single user response
type UserResponse struct {
	// User Representation of a user
	User User `json:"user"`
}

// UsersListResponse Users list response
type UsersListResponse struct {
	Users []User `json:"users"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserPrototype

// UpdateUserByIdJSONRequestBody defines body for UpdateUserById for application/json ContentType.
type UpdateUserByIdJSONRequestBody = UserPrototype

// Getter for additional properties for ProblemDetails. Returns the specified
// element and whether it was found
func (a ProblemDetails) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetails
func (a *ProblemDetails) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a *ProblemDetails) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["error_code"]; found {
		err = json.Unmarshal(raw, &a.ErrorCode)
		if err != nil {
			return fmt.Errorf("error reading 'error_code': %w", err)
		}
		delete(object, "error_code")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["invalid_params"]; found {
		err = json.Unmarshal(raw, &a.InvalidParams)
		if err != nil {
			return fmt.Errorf("error reading 'invalid_params': %w", err)
		}
		delete(object, "invalid_params")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["trace_id"]; found {
		err = json.Unmarshal(raw, &a.TraceId)
		if err != nil {
			return fmt.Errorf("error reading 'trace_id': %w", err)
		}
		delete(object, "trace_id")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a ProblemDetails) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.ErrorCode != nil {
		object["error_code"], err = json.Marshal(a.ErrorCode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error_code': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if a.InvalidParams != nil {
		object["invalid_params"], err = json.Marshal(a.InvalidParams)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'invalid_params': %w", err)
		}
	}

	if a.Status != nil {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.TraceId != nil {
		object["trace_id"], err = json.Marshal(a.TraceId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trace_id': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProblemDetailsBase. Returns the specified
// element and whether it was found
func (a ProblemDetailsBase) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetailsBase
func (a *ProblemDetailsBase) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetailsBase to handle AdditionalProperties
func (a *ProblemDetailsBase) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetailsBase to handle AdditionalProperties
func (a ProblemDetailsBase) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if a.Status != nil {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Liveness チェック
	// (GET /health/liveness)
	GetHealthLiveness(c *gin.Context)
	// Readiness チェック
	// (GET /health/readiness)
	GetHealthReadiness(c *gin.Context)
	// List all users
	// (GET /users)
	ListUsers(c *gin.Context)
	// Create a new user
	// (POST /users)
	CreateUser(c *gin.Context)
	// Delete a user by ID
	// (DELETE /users/{user_id})
	DeleteUserById(c *gin.Context, userId string)
	// Get a user by ID
	// (GET /users/{user_id})
	GetUserById(c *gin.Context, userId string)
	// Update a user by ID
	// (PATCH /users/{user_id})
	UpdateUserById(c *gin.Context, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetHealthLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetHealthLiveness(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealthLiveness(c)
}

// GetHealthReadiness operation middleware
func (siw *ServerInterfaceWrapper) GetHealthReadiness(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealthReadiness(c)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUsers(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// DeleteUserById operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserById(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUserById(c, userId)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserById(c, userId)
}

// UpdateUserById operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserById(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserById(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/health/liveness", wrapper.GetHealthLiveness)
	router.GET(options.BaseURL+"/health/readiness", wrapper.GetHealthReadiness)
	router.GET(options.BaseURL+"/users", wrapper.ListUsers)
	router.POST(options.BaseURL+"/users", wrapper.CreateUser)
	router.DELETE(options.BaseURL+"/users/:user_id", wrapper.DeleteUserById)
	router.GET(options.BaseURL+"/users/:user_id", wrapper.GetUserById)
	router.PATCH(options.BaseURL+"/users/:user_id", wrapper.UpdateUserById)
}

type GetHealthLivenessRequestObject struct {
}

type GetHealthLivenessResponseObject interface {
	VisitGetHealthLivenessResponse(w http.ResponseWriter) error
}

type GetHealthLiveness200JSONResponse HealthStatus

func (response GetHealthLiveness200JSONResponse) VisitGetHealthLivenessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthLiveness503JSONResponse HealthStatus

func (response GetHealthLiveness503JSONResponse) VisitGetHealthLivenessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthReadinessRequestObject struct {
}

type GetHealthReadinessResponseObject interface {
	VisitGetHealthReadinessResponse(w http.ResponseWriter) error
}

type GetHealthReadiness200JSONResponse HealthStatus

func (response GetHealthReadiness200JSONResponse) VisitGetHealthReadinessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthReadiness503JSONResponse HealthStatus

func (response GetHealthReadiness503JSONResponse) VisitGetHealthReadinessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type ListUsersRequestObject struct {
}

type ListUsersResponseObject interface {
	VisitListUsersResponse(w http.ResponseWriter) error
}

type ListUsers200JSONResponse UsersListResponse

func (response ListUsers200JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUsers500JSONResponse ProblemDetails

func (response ListUsers500JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse UserResponse

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser400JSONResponse ProblemDetails

func (response CreateUser400JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser500JSONResponse ProblemDetails

func (response CreateUser500JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserByIdRequestObject struct {
	UserId string `json:"user_id"`
}

type DeleteUserByIdResponseObject interface {
	VisitDeleteUserByIdResponse(w http.ResponseWriter) error
}

type DeleteUserById204Response struct {
}

func (response DeleteUserById204Response) VisitDeleteUserByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUserById404JSONResponse ProblemDetails

func (response DeleteUserById404JSONResponse) VisitDeleteUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserById500JSONResponse ProblemDetails

func (response DeleteUserById500JSONResponse) VisitDeleteUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByIdRequestObject struct {
	UserId string `json:"user_id"`
}

type GetUserByIdResponseObject interface {
	VisitGetUserByIdResponse(w http.ResponseWriter) error
}

type GetUserById200JSONResponse UserResponse

func (response GetUserById200JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById404JSONResponse ProblemDetails

func (response GetUserById404JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById500JSONResponse ProblemDetails

func (response GetUserById500JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserByIdRequestObject struct {
	UserId string `json:"user_id"`
	Body   *UpdateUserByIdJSONRequestBody
}

type UpdateUserByIdResponseObject interface {
	VisitUpdateUserByIdResponse(w http.ResponseWriter) error
}

type UpdateUserById200JSONResponse UserResponse

func (response UpdateUserById200JSONResponse) VisitUpdateUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserById400JSONResponse ProblemDetails

func (response UpdateUserById400JSONResponse) VisitUpdateUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserById404JSONResponse ProblemDetails

func (response UpdateUserById404JSONResponse) VisitUpdateUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserById500JSONResponse ProblemDetails

func (response UpdateUserById500JSONResponse) VisitUpdateUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Liveness チェック
	// (GET /health/liveness)
	GetHealthLiveness(ctx context.Context, request GetHealthLivenessRequestObject) (GetHealthLivenessResponseObject, error)
	// Readiness チェック
	// (GET /health/readiness)
	GetHealthReadiness(ctx context.Context, request GetHealthReadinessRequestObject) (GetHealthReadinessResponseObject, error)
	// List all users
	// (GET /users)
	ListUsers(ctx context.Context, request ListUsersRequestObject) (ListUsersResponseObject, error)
	// Create a new user
	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Delete a user by ID
	// (DELETE /users/{user_id})
	DeleteUserById(ctx context.Context, request DeleteUserByIdRequestObject) (DeleteUserByIdResponseObject, error)
	// Get a user by ID
	// (GET /users/{user_id})
	GetUserById(ctx context.Context, request GetUserByIdRequestObject) (GetUserByIdResponseObject, error)
	// Update a user by ID
	// (PATCH /users/{user_id})
	UpdateUserById(ctx context.Context, request UpdateUserByIdRequestObject) (UpdateUserByIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetHealthLiveness operation middleware
func (sh *strictHandler) GetHealthLiveness(ctx *gin.Context) {
	var request GetHealthLivenessRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthLiveness(ctx, request.(GetHealthLivenessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthLiveness")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetHealthLivenessResponseObject); ok {
		if err := validResponse.VisitGetHealthLivenessResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealthReadiness operation middleware
func (sh *strictHandler) GetHealthReadiness(ctx *gin.Context) {
	var request GetHealthReadinessRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthReadiness(ctx, request.(GetHealthReadinessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthReadiness")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetHealthReadinessResponseObject); ok {
		if err := validResponse.VisitGetHealthReadinessResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUsers operation middleware
func (sh *strictHandler) ListUsers(ctx *gin.Context) {
	var request ListUsersRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListUsers(ctx, request.(ListUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListUsersResponseObject); ok {
		if err := validResponse.VisitListUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx *gin.Context) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUserById operation middleware
func (sh *strictHandler) DeleteUserById(ctx *gin.Context, userId string) {
	var request DeleteUserByIdRequestObject

	request.UserId = userId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserById(ctx, request.(DeleteUserByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteUserByIdResponseObject); ok {
		if err := validResponse.VisitDeleteUserByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserById operation middleware
func (sh *strictHandler) GetUserById(ctx *gin.Context, userId string) {
	var request GetUserByIdRequestObject

	request.UserId = userId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserById(ctx, request.(GetUserByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserByIdResponseObject); ok {
		if err := validResponse.VisitGetUserByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUserById operation middleware
func (sh *strictHandler) UpdateUserById(ctx *gin.Context, userId string) {
	var request UpdateUserByIdRequestObject

	request.UserId = userId

	var body UpdateUserByIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUserById(ctx, request.(UpdateUserByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUserById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUserByIdResponseObject); ok {
		if err := validResponse.VisitUpdateUserByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xafW8btxn/KgQ3YA2gV1u2UwEF5sROpsKzDTkuMBiGQekeSczuyCtJ+QWGgErahmxe",
	"ELTYmhbosCEd1qxF6gEFtqxb92UYJ+23GEiepNPp/JY4aIr4H+uO95DP+4/PQ3of13kQcgZMSVzex7Le",
	"goDYx58B8VVrTRHVtu+wS4LQB0sVDWKyTahPaj7gTgaHgocgFAUZp9nHHsi6oKGinOEy1r1/6d6/df83",
	"uv8X3f3y2e/++fTXBziDgbUDXN6ILZnBbTZ628xgtRcCLmOpBGVN3OlksIB321SAZyZGDEd0vHYb6spI",
	"VmHbxKfeKhEkmJRoHknKmj4g6shQaOhAgUCEeYgqiew4MfRIAJGc5XBSX0YCmFz7VguQ+YJ4A6nWiEWD",
	"gu+hNyhDb6+tLF8xyw3tiyEg1McT+hp1De90Lu4b2mntWUaOAZUDjuMcgrZUqAaIOM2Q5YiI5wmQEp9m",
	"aavqUJo0g68KXvMhWABFqG/NQ3x/pYHLG/v4xwIauIx/lB9FXj4Ku/z4vGtEmsDaT1gahOBiq849GAtL",
	"XFl+Z36psrC1Ol+d//nircXqWpoNI3tsWSfb9agC93CSZGMh1BmuS4Qge/ZdkDpsUW9cpOLUNJRmZuey",
	"cPXNWrY45U1nSWlmNluamp0tlopzpUKhkGruhEU3J2xqbWPs6nnURAHxV2NGUqINmUSQrCnCPCI8VL1x",
	"fe5qYQ5FC6JoRVQjElDEMRndnqUxTykGlYqwupWmwUVAFC7jtqBZAQ0QYL6kuGEED8M5lKnpqREtZQqa",
	"IKxxqXLAM7GMGzg7405KsK5LEJM5VYVQgASmXNrzBiKobSiTpnHZOjF/MZ5Sg/SPFgjI7hKwpmrh8tRM",
	"KYMDygbvM0mRM3g3y0lIsybgm8CysKsEySrStNxrlHmGrDzM0IwVKBNQ9tZMJiC7b03NlKziLjjHpVxn",
	"9N02IOoBU7RBQaAGF0NR0Rvr65WF7bkr4zJPz46JbF4nZW7ybDTYblMvZxaKj2dpEHKhRshpyYxxiVkT",
	"N6lqtWu5Og/yTc6bPuTt9875zeHmdTLHIPSNtu+PQfSkj4qFwpjCxRf3kfFO0XqnWCjgThJhrSUimHXx",
	"tXlM4K4KrvggC8Y1G35CDsSsa61b6wKIAmReQ48o+OHG9A/Ip2dyZxVkyJlM0WnN1SjWf2JAlfRbO4Ky",
	"k3YyC3dJ4ezE44SSS1Sq4yWzJMinUp0s2Nk3Wyei9VfF0Vt3je+5KRqkVX8W+ViD2+3D7SP4Jp8PQzS/",
	"WsEZvA1COj2KuUKuYNjyEBgJKS7j6VwhNx2BkpU637JVcd6n28BMrVTex01Qp5W5v3/66NOjx49194uj",
	"gz8++eYT3b2vu3/T3V/p3oHuHujeB88efP3t53ft+P9092P9Xg9bQYTdfiqekRqUq8mXBsyNBZzBrSBT",
	"hYL5qXOmgFmZSBj6tG6XyN+OSkdn5NNcMFb9WyOeqN+zh/896t998viRsd9MYfr7kuOo+8nTRw+sDf+s",
	"u4e6f0/3v9K9f+jeA93v6/59K6KpP9pBQMQeLuOBNZHud3XvM0PWOzSVg830jagPwptm1sD9AohHz+N/",
	"3f9c9w5176EdvKN7Hxzdu6+77z/5z0e6+77uHTz9+sOj3seGsvuZ7t59geioDmV7dcLj6M7fn/3h4dG9",
	"w2/733zfEWJFefL47tG9w0QkDC13plAYQlqq/6ugBIVtkIg4aOQNi90yN+E5g64WQ5/PYbG+PBJpY7iB",
	"49u8xXIeh59GVKagwq4UTDQnc6TuZUkDitlCcWrajF99k9QGZUgZv81bDC1wcM3I2VwzuXmk+Gc+aR8b",
	"H+fUfNCf4HUGuyHUFXjI9omI1+ttIcBDOy3qAwoFr4M0Db8tDMwOAlLZ7jjWVuLK8q3F6vL80tZitbpS",
	"xaN+ZcZuRNE+UmEKBCM+kiC2QTiOON4MnrMDbCkVynI+H/NWPnRtmszTiBs+s/0TbXiK8dM1SAKkVIj4",
	"vvNPLB1c0JpwCLlMyYHrtsw0GcBgx86eDH5Hs+7qs8gb17i3dz73D8OdMMjJgKpWIuAHQUwYoDXzHZ8r",
	"iEdVdqKsM412ZyJti+dP2zNpcWLaklrdg4b7m67xuVQ+KWWd07zIpZ0MLj13vr4zOllrEOqDl5KKKcc6",
	"yVOcjWEbOTg8G5yVnXLW1ckMZ44fa0UTGbeTIQjVHu5sjoCgFAeCX/C2GGDJ6PhQIo967CdqcHwIuZeI",
	"DZZHNpLhIiHiGvFQbNlLaH6FoNklYgxgU9B5WKvk983PFvU6zi0+qJRubsGOy+i0C9X27AF4ZWESuh2l",
	"YXNtr+JNFi+l9FYROc4eeoNxFIXRFQcipeeMrGXuhN2hqmVjp2lqelRZQDtEogZvs0lYWV9brG4tr9za",
	"urGyvryA44ldGoWRFdhggF3kpcWPkT7LuMo6NhcYRQkFLhP41Upgl0OxZLOnpJMF1qk9xmnJehPU8Zla",
	"eMF65SU0GRdWqwxv92LFyiXOXOLM64UzN0GdDjKjwtUW1CkOrizEr4SoGbf3NcMEjioMnOyR4tqe5yap",
	"Y0rukKh6K6WYsHcXEhGGYJdKZeLhNBh0c8aQ8EVbTt5iRLVIGgLGUM2SOGh7iY3nBQD5cbo8J5rH9L4w",
	"SHdOvGw/X8f283Lzvty8X7fN2+Hdafu3/d8WNzZxGdX/SPe/sLcgo3uN7z588N17n+rul7r3UPe/0v3f",
	"6v6fdO+v9vnOCMWjS48M3s16VIY+2Vse+2AgbJzdymDLlUiAb6FaRckXEEaaEJiYGjIY3H0k13fjBvR2",
	"s4o0bwreDsew1gmArreg/svoNnfipmaErzbIx6kGptvs/D8AAP//CuBKKggpAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
